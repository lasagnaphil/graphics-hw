//
// Created by lasagnaphil on 2/8/18.
//

#include "Camera.h.temp2"
#include "../Scene.h"
#include "../AppSettings.h"
#include "../InputManager.h"

Camera::Camera(glm::vec3 position, glm::vec3 up, float yaw, float pitch)
        : front({0.0f, 0.0f, -1.0f}),
          position(position),
          worldUp(up),
          yaw(yaw),
          pitch(pitch),
          movementSpeed(Settings::Speed),
          mouseSensitivity(Settings::Sensitivity),
          zoom(Settings::Zoom) {
    updateCameraVectors();
    viewport = {.x = 0, .y = 0, .width = AppSettings::ScreenWidth, .height = AppSettings::ScreenHeight};
}

void Camera::cameraUpdate() {
    for (auto shader : shaders) {
        shader.use();
        glm::mat4 projection = getPerspectiveMatrix();
        shader.setMat4("projection", projection);
        glm::mat4 view = getViewMatrix();
        shader.setMat4("view", view);
    }
}

void Camera::update(float dt) {
    static glm::ivec2 prevMousePos;

    auto inputMgr = InputManager::getInstance();

    // Mouse movement
    auto mousePos = inputMgr->mousePos();
    glm::ivec2 mouseOffset = mousePos - prevMousePos;

    mouseOffset *= mouseSensitivity;
    yaw += mouseOffset.x;
    pitch += mouseOffset.y;

    if (pitch > 89.0f) pitch = 89.9f;
    if (pitch < -89.0f) pitch = -89.0f;

    prevMousePos = mousePos;

    updateCameraVectors();

    // Keyboard movement
    float velocity = movementSpeed * dt;
    if (inputMgr->keyboardPressed(SDLK_w)) {
        position += front * velocity;
    }
    else if (inputMgr->keyboardPressed(SDLK_s)) {
        position -= front * velocity;
    }
    else if (inputMgr->keyboardPressed(SDLK_a)) {
        position -= right * velocity;
    }
    else if (inputMgr->keyboardPressed(SDLK_d)) {
        position += right * velocity;
    }
    // Mouse scroll movement


}

void Camera::updateCameraVectors() {
    glm::vec3 front;
    front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
    front.y = sin(glm::radians(pitch));
    front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
    front = glm::normalize(front);
    right = glm::normalize(glm::cross(front, worldUp));
    up = glm::normalize(glm::cross(right, front));
}


